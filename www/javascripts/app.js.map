{"version":3,"file":"www/javascripts/app.js","sources":["app/application.coffee","app/initialize.coffee","app/modules/user/user.coffee","app/modules/vent/vent.coffee","app/views/MainView.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;;A","sourcesContent":["/*\n    Application\n    - Main application class\n\n    Responsible for initialization and bridging modules and views.\n*/\n\nvar Application;\n\nApplication = (function() {\n  function Application() {}\n\n  Application.prototype.initialize = function() {\n    Lungo.init({\n      resources: ['templates/asides/side_drawer.html', 'templates/sections/page_two.html']\n    });\n    this.init_vent();\n    this.init_user();\n    this.init_views();\n    return this.vent.internal.trigger('application_ready');\n  };\n\n  /* Initializers*/\n\n\n  Application.prototype.init_vent = function() {\n    var Vent;\n    Vent = require('./modules/vent/vent');\n    return this.vent = new Vent();\n  };\n\n  Application.prototype.init_user = function() {\n    var User;\n    User = require('./modules/user/user');\n    return this.user = new User();\n  };\n\n  Application.prototype.init_views = function() {\n    var MainView;\n    MainView = require('./views/MainView');\n    return this.mainview = new MainView();\n  };\n\n  return Application;\n\n})();\n\nmodule.exports = new Application();\n","var application;\n\napplication = require('application');\n\n$(function() {\n  return application.initialize();\n});\n","/*\n\tUser\n    - Maintains all data logic for the user\n*/\n\nvar User, app;\n\napp = require('../../application');\n\nmodule.exports = User = (function() {\n  function User() {\n    this.email = '';\n    this.password = '';\n    this.first_name = '';\n    this.last_name = '';\n  }\n\n  /* Functions*/\n\n\n  User.prototype.fetch_init_data = function() {};\n\n  return User;\n\n})();\n","/*\n\tVent\n    - Events wrapper class\n\n\tI also usually maintiain socket.io here too if I use it in my backend:\n\n\t\tconstructor: () ->\n\t\t\t@external = io.connect('http://localhost:3000')\n\n\tThis make for a nice, semantic way to handle events:\n\n\t\tapp.vent.internal.on('event', 'function')\n\t\tapp.vent.external.on('event', 'function')\n*/\n\nvar Vent, app;\n\napp = require('../../application');\n\nmodule.exports = Vent = (function() {\n  function Vent() {\n    this.internal = LucidJS.emitter();\n  }\n\n  /* Functions*/\n\n\n  return Vent;\n\n})();\n","/*\n\tMainView\n    - Handles all view logic for the main view (DOM manipulations, etc)\n*/\n\nvar MainView, app;\n\napp = require('../application');\n\nmodule.exports = MainView = (function() {\n  function MainView() {\n    this.register_events();\n  }\n\n  /* Events*/\n\n\n  MainView.prototype.register_events = function() {\n    var _this = this;\n    return app.vent.internal.on('application_ready', function() {\n      return _this.log('application ready');\n    });\n  };\n\n  /* Functions*/\n\n\n  MainView.prototype.log = function(msg) {\n    return console.log(msg);\n  };\n\n  return MainView;\n\n})();\n"]}