{"version":3,"file":"www/javascripts/app.js","sources":["app/application.coffee","app/initialize.coffee","app/modules/dictionary/dictionary.iced","app/modules/file/simplefile.iced","app/modules/user/user.coffee","app/modules/vent/vent.coffee","app/utils/arbitrary_sorter.coffee","app/views/BaseView.coffee","app/views/ListItemView.coffee","app/views/ListView.coffee","app/views/MainView.coffee","app/views/SearchView.coffee","app/views/WordListItemView.coffee","app/views/WordListView.coffee","app/views/WordPageView.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/IA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3GA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnEA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArzOA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArGA;;A","sourcesContent":["/*\n    Application\n    - Main application class\n\n    Responsible for initialization and bridging modules and views.\n*/\n\nvar Application;\n\nApplication = (function() {\n  function Application() {}\n\n  Application.prototype.initialize = function() {\n    Lungo.init({\n      resources: ['templates/asides/side_drawer.html', 'templates/sections/page_two.html', 'templates/sections/word_page.html']\n    });\n    this.initVent();\n    this.initModel();\n    this.initViews();\n    return this.vent.internal.trigger('application_ready');\n  };\n\n  /* Initializers*/\n\n\n  Application.prototype.initVent = function() {\n    var Vent;\n    Vent = require('./modules/vent/vent');\n    return this.vent = new Vent();\n  };\n\n  Application.prototype.initModel = function() {\n    var Dictionary;\n    Dictionary = require('./modules/dictionary/dictionary');\n    return this.model = {\n      dictionary: new Dictionary(\"Rrnake.json\")\n    };\n  };\n\n  Application.prototype.initViews = function() {\n    var MainView;\n    MainView = require('./views/MainView');\n    return this.mainview = new MainView({\n      model: this.model\n    });\n  };\n\n  return Application;\n\n})();\n\nmodule.exports = new Application();\n","var application, debug;\n\napplication = require('application');\n\ndebug = true;\n\nBackbone.$ = $$;\n\nconsole.log(\"Hooking to deviceready event...\");\n\n$(document).on('deviceready', function() {\n  var iOS7;\n  console.log(\"Device ready.  Checking for iOS7...\");\n  iOS7 = window.device && window.device.platform && window.device.platform.toLowerCase() === \"ios\" && parseFloat(window.device.version) >= 7.0;\n  if (iOS7) {\n    $('html').addClass('ios7');\n  }\n  navigator.splashscreen.hide();\n  return console.log(\"Is iOS7?: \" + iOS7);\n});\n\nconsole.log(\"hooking to domready...\");\n\n$(function() {\n  console.log(\"domready!\");\n  return application.initialize();\n});\n","(function() {\n  var Dictionary, app, iced, readFile, __iced_k, __iced_k_noop;\n\n  iced = require('iced-coffee-script').iced;\n  __iced_k = __iced_k_noop = function() {};\n\n  app = require('../../application');\n\n  readFile = function(path, callback) {\n    var r;\n    console.log(\"fake fs.readFile: \" + path);\n    r = $.get(path, $.noop, 'text');\n    r.done(function(data, textStatus) {\n      return callback(null, data);\n    });\n    return r.fail(function() {\n      return callback(\"couldn't load.\", null);\n    });\n  };\n\n  module.exports = Dictionary = (function() {\n    Dictionary.LOADING = \"loading\";\n\n    Dictionary.INITIALIZED = \"initialized\";\n\n    function Dictionary(source) {\n      this.source = source;\n      this.status = Dictionary.LOADING;\n      this.loadSource();\n    }\n\n    Dictionary.prototype.loadSource = function() {\n      var data, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      (function(_this) {\n        return (function(__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            funcname: \"Dictionary.loadSource\"\n          });\n          _this.loadFromDisk(__iced_deferrals.defer({\n            assign_fn: (function() {\n              return function() {\n                return data = arguments[0];\n              };\n            })(),\n            lineno: 21\n          }));\n          __iced_deferrals._fulfill();\n        });\n      })(this)((function(_this) {\n        return function() {\n          return _this.initialize(data);\n        };\n      })(this));\n    };\n\n    Dictionary.prototype.loadFromDisk = function(callback) {\n      var data, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;\n      __iced_k = __iced_k_noop;\n      ___iced_passed_deferral = iced.findDeferral(arguments);\n      (function(_this) {\n        return (function(__iced_k) {\n          __iced_deferrals = new iced.Deferrals(__iced_k, {\n            parent: ___iced_passed_deferral,\n            funcname: \"Dictionary.loadFromDisk\"\n          });\n          readFile(_this.source, __iced_deferrals.defer({\n            assign_fn: (function() {\n              return function() {\n                err = arguments[0];\n                return data = arguments[1];\n              };\n            })(),\n            lineno: 27\n          }));\n          __iced_deferrals._fulfill();\n        });\n      })(this)((function(_this) {\n        return function() {\n          console.log(\"Dictionary.loadFromDisk: readFile finished.\");\n          if (data) {\n            data = JSON.parse(data);\n          }\n          return callback(data);\n        };\n      })(this));\n    };\n\n    Dictionary.prototype.initialize = function(data) {\n      if (data) {\n        this.data = data;\n      } else {\n        this.data = {\n          dictionary: {\n            entries: []\n          }\n        };\n      }\n      this.cacheRelations();\n      this.entries = this.data.dictionary.entries;\n      this.status = Dictionary.INITIALIZED;\n      return app.vent.internal.trigger('dictionary.initialized');\n    };\n\n    Dictionary.prototype.cacheRelations = function() {\n\n      /*\n      \t\tAKA THIS IS NOT A RELATIONAL DATABASE BOO HOO\n       */\n      return console.log(\"Dictionary.cacheRelations: does nothing right now because quick prototyping\");\n    };\n\n    Dictionary.prototype.findSingleEntry = function(predicate) {\n      var entry, _i, _len, _ref;\n      _ref = this.entries;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        entry = _ref[_i];\n        if (predicate(entry)) {\n          return entry;\n        }\n      }\n    };\n\n    Dictionary.prototype.findAllEntries = function(predicate) {\n      var entry, _i, _len, _ref, _results;\n      _ref = this.entries;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        entry = _ref[_i];\n        if (predicate(entry)) {\n          _results.push(entry);\n        }\n      }\n      return _results;\n    };\n\n    return Dictionary;\n\n  })();\n\n}).call(this);\n","(function() {\n  var environment, error, fs, readFile;\n\n  try {\n    fs = require('fs');\n    environment = 'node';\n  } catch (_error) {\n    error = _error;\n    console.log(\"Error trying to require fs module.  Assuming non-nodeJS environment.\");\n    if (typeof window !== \"undefined\" && window !== null ? window.device : void 0) {\n      environment = 'phonegap';\n    } else {\n      environment = 'web';\n    }\n  }\n\n  switch (environment) {\n    case 'node':\n      readFile = function(path, onLoad) {\n        var options;\n        options = {\n          encoding: 'utf8'\n        };\n        return fs.readFile(path, options, onLoad);\n      };\n      break;\n    case 'phonegap':\n    case 'web':\n      readFile = function(path, onLoad) {\n        var r;\n        r = $.get(path, $.noop, 'text');\n        r.done(function(data, textStatus) {\n          return onLoad(null, data);\n        });\n        return r.fail(function() {\n          return onLoad(\"couldn't load.\", null);\n        });\n      };\n  }\n\n  module.exports = {\n    readFile: readFile\n  };\n\n}).call(this);\n","/*\n\tUser\n    - Maintains all data logic for the user\n*/\n\nvar User, app;\n\napp = require('../../application');\n\nmodule.exports = User = (function() {\n  function User() {\n    this.email = '';\n    this.password = '';\n    this.first_name = '';\n    this.last_name = '';\n  }\n\n  /* Functions*/\n\n\n  User.prototype.fetch_init_data = function() {};\n\n  return User;\n\n})();\n","/*\n\tVent\n    - Events wrapper class\n\n\tI also usually maintiain socket.io here too if I use it in my backend:\n\n\t\tconstructor: () ->\n\t\t\t@external = io.connect('http://localhost:3000')\n\n\tThis make for a nice, semantic way to handle events:\n\n\t\tapp.vent.internal.on('event', 'function')\n\t\tapp.vent.external.on('event', 'function')\n*/\n\nvar Vent, app;\n\napp = require('../../application');\n\nmodule.exports = Vent = (function() {\n  function Vent() {\n    this.internal = LucidJS.emitter();\n  }\n\n  /* Functions*/\n\n\n  return Vent;\n\n})();\n","/*\nArbitrarySorter\n\nPort of Wm's code posted on Acta Lingueeni:\nhttp://acta-lingweenie.blogspot.com/2013/10/arbitrary-sort-orders-in-python.html\n\nWith some consideration for Javascript's lack of default sorting mechanisms\nbeyond simple strings.\n*/\n\n/*\nUse:\n\tsorter = ArbitrarySorter( \"a b c ch d dh e f\" )\n\twordList.sort sorter\n\nNote, there is no 'new' keyword.\n\nSorters also have a sort function attached which returns a new sorted array\nwithout touching the original.\n\tsortedWordList = sorter.sort wordList\n\nSorters compares 2 strings.\n\nYou can sort complex records by defining the .toString() method\non the records' prototype as the sorter calls .toString() on\nthe items it's comparing.\n\n\tRecord.prototype.toString = -> @[ \"\\\\lx\" ]\n\tarrayOfRecords.sort sorter\n\nYou can as always also wrap it in a destructuring function\nwhich gets the keys to compare out of the records for it.\n\n\tcompareRecords = ( a, b ) -> sorter( a[ \"\\\\lx\" ], b[ \"\\\\lx\" ] )\n\tarrayOfRecords.sort compareRecords\n*/\n\nvar ArbitrarySorter;\n\nmodule.exports = ArbitrarySorter = function(order) {\n  var comparator, elts, i, ords, splitOrder, splitter, vals, valuesAsWord, wordAsValues, _i, _ref;\n  elts = order.split(/\\s+/);\n  splitOrder = elts.concat();\n  splitOrder.sort(function(a, b) {\n    return -(a.length - b.length);\n  });\n  splitter = new RegExp(\"(\" + (splitOrder.join('|')) + \")\", \"gi\");\n  ords = {};\n  vals = elts.concat();\n  /* Coffeescript produces an odd but I guess necessary loop\n  \t\tjust in case you're trying to iterate backwards...\n  */\n\n  for (i = _i = 0, _ref = elts.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n    ords[elts[i]] = i;\n  }\n  comparator = function(stringA, stringB) {\n    var avs, bvs;\n    avs = wordAsValues(stringA.toString());\n    bvs = wordAsValues(stringB.toString());\n    return ArbitrarySorter.compareArraysByValues(avs, bvs);\n  };\n  comparator.wordAsValues = wordAsValues = function(word) {\n    var a, ri, splitParts, _j, _len, _results;\n    splitParts = [];\n    splitter.lastIndex = 0;\n    while (a = splitter.exec(word)) {\n      splitParts.push(a[1]);\n    }\n    _results = [];\n    for (_j = 0, _len = splitParts.length; _j < _len; _j++) {\n      ri = splitParts[_j];\n      _results.push(ords[ri]);\n    }\n    return _results;\n  };\n  comparator.valuesAsWord = valuesAsWord = function(values) {\n    var splitParts, v, _j, _len;\n    for (_j = 0, _len = values.length; _j < _len; _j++) {\n      v = values[_j];\n      splitParts = vals[v];\n    }\n    return splitParts.join('');\n  };\n  comparator.sort = function(wordList) {\n    return wordList.concat().sort(comparator);\n  };\n  return comparator;\n};\n\nArbitrarySorter.compareArraysByValues = function(avs, bvs) {\n  var i;\n  i = 0;\n  while ((avs[i] != null) || (bvs[i] != null)) {\n    if (avs[i] === bvs[i]) {\n      ++i;\n      continue;\n    } else if ((avs[i] != null) && (bvs[i] == null)) {\n      return 1;\n    } else if ((avs[i] == null) && (bvs[i] != null)) {\n      return -1;\n    } else {\n      return avs[i] - bvs[i];\n    }\n  }\n  return 0;\n};\n","var BaseView,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = BaseView = (function(_super) {\n  __extends(BaseView, _super);\n\n  BaseView.template = function(templateString) {\n    return this.prototype.template = Handlebars.compile(templateString);\n  };\n\n  function BaseView(options) {\n    if (options != null) {\n      switch ((Backbone.$.type || Backbone.$.toType)(options.el)) {\n        case 'array':\n        case 'object':\n          options.el = options.el[0];\n      }\n    }\n    BaseView.__super__.constructor.apply(this, arguments);\n  }\n\n  BaseView.prototype.setElement = function(element, delegate) {\n    if (this.$el) {\n      this.undelegateEvents();\n    }\n    this.$el = (function() {\n      switch (false) {\n        case !(element instanceof Backbone.$):\n        case !($$ && element.__proto__ === $$.fn):\n          return element;\n        default:\n          return Backbone.$(element);\n      }\n    })();\n    this.el = this.$el[0];\n    if (delegate !== false) {\n      this.delegateEvents();\n    }\n    return this;\n  };\n\n  BaseView.prototype._ensureElement = function() {\n    var $el, attrName, attrValue, attrs;\n    if (!this.el) {\n      attrs = _.extend({}, _.result(this, 'attributes'));\n      if (this.id) {\n        attrs.id = _.result(this, 'id');\n      }\n      if (this.className) {\n        attrs['class'] = _.result(this, 'className');\n      }\n      $el = Backbone.$(\"<\" + (_.result(this, 'tagName')) + \">\");\n      for (attrName in attrs) {\n        if (!__hasProp.call(attrs, attrName)) continue;\n        attrValue = attrs[attrName];\n        $el.attr(attrName, attrValue);\n      }\n      return this.setElement($el, false);\n    } else {\n      return this.setElement(_.result(this, 'el'), false);\n    }\n  };\n\n  return BaseView;\n\n})(Backbone.View);\n","var BaseView, ListItemView, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nBaseView = require('./BaseView');\n\nmodule.exports = ListItemView = (function(_super) {\n  __extends(ListItemView, _super);\n\n  function ListItemView() {\n    _ref = ListItemView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  ListItemView.prototype.tagName = 'li';\n\n  ListItemView.template(\"<strong>{{ word }}</strong>\\n<small>{{ glosses }}</small>\");\n\n  ListItemView.prototype.initialize = function(options) {\n    return this.render();\n  };\n\n  ListItemView.prototype.render = function() {\n    this.$el.html(this.template(this.mapModel()));\n    return this;\n  };\n\n  ListItemView.prototype.mapModel = function() {\n    return this.model;\n  };\n\n  return ListItemView;\n\n})(BaseView);\n","var BaseView, ListItemView, ListView, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nBaseView = require('./BaseView');\n\nListItemView = require('./ListItemView');\n\n/*\nExpects a model in the form of:\n\tentries: [ (dictionary entries here)... ]\n*/\n\n\nmodule.exports = ListView = (function(_super) {\n  __extends(ListView, _super);\n\n  function ListView() {\n    _ref = ListView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  ListView.template(\"<ul class=\\\"list-view\\\"></ul>\");\n\n  ListView.prototype.itemViewClass = ListItemView;\n\n  ListView.prototype.initialize = function(options) {\n    this.$el.addClass(\"list scroll\");\n    return this.render();\n  };\n\n  ListView.prototype.render = function() {\n    var listEl;\n    listEl = Backbone.$(this.template());\n    this.populateListElement(listEl, this.getModelsForListEls());\n    return this.$el.empty().append(listEl);\n  };\n\n  ListView.prototype.populateListElement = function(listEl, models) {\n    var itemModel, itemView, _i, _len, _ref1;\n    if (models) {\n      this.itemViews = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = models.length; _i < _len; _i++) {\n          itemModel = models[_i];\n          _results.push(new this.itemViewClass({\n            model: itemModel\n          }));\n        }\n        return _results;\n      }).call(this);\n      _ref1 = this.itemViews;\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        itemView = _ref1[_i];\n        listEl.append(itemView.el);\n      }\n    }\n    return listEl;\n  };\n\n  ListView.prototype.getModelsForListEls = function() {\n    var _ref1;\n    return (_ref1 = this.model) != null ? _ref1.entries : void 0;\n  };\n\n  return ListView;\n\n})(BaseView);\n","/*\n\tMainView\n    - Handles all view logic for the main view (DOM manipulations, etc)\n*/\n\nvar ArbitrarySorter, BaseView, MainView, SearchView, WordListView, WordPageView, app, _ref,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\napp = require('../application');\n\nBaseView = require('./BaseView');\n\nWordListView = require('./WordListView');\n\nWordPageView = require('./WordPageView');\n\nSearchView = require('./SearchView');\n\nArbitrarySorter = require('utils/arbitrary_sorter');\n\nmodule.exports = MainView = (function(_super) {\n  __extends(MainView, _super);\n\n  function MainView() {\n    this.doSearch = __bind(this.doSearch, this);\n    _ref = MainView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  MainView.prototype.el = 'body';\n\n  MainView.prototype.events = {};\n\n  MainView.prototype.initialize = function() {\n    this.$el.addClass(\"main-view\");\n    this.mainSectionEl = this.$(\"#layout\");\n    this.registerEvents();\n    return this.registerViews();\n  };\n\n  /* Events*/\n\n\n  MainView.prototype.registerEvents = function() {\n    var _this = this;\n    this.mainSectionEl.on('unload', function() {\n      return _this.searchView.blur();\n    });\n    app.vent.internal.on('dictionary.initialized', function() {\n      console.log(\"MainView: dictionary.initialized fired.\");\n      return _this.refreshMainListViews();\n    });\n    return app.vent.internal.on('app.search', this.doSearch);\n  };\n\n  MainView.prototype.doSearch = function(searchVal) {\n    var matches, pendent, predicate, testDefinitions, testGlosses, testWord;\n    console.log(\"MainView on app.search: \" + searchVal);\n    testWord = function(entry) {\n      return 0 <= entry.word.indexOf(searchVal);\n    };\n    testGlosses = function(entry) {\n      var gloss, _i, _len, _ref1;\n      _ref1 = _.collectDeep(entry, \"definitionSenses.#.glosses.#\");\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        gloss = _ref1[_i];\n        if (0 <= gloss.indexOf(searchVal)) {\n          return true;\n        }\n      }\n    };\n    testDefinitions = function(entry) {\n      var definition, _i, _len, _ref1;\n      _ref1 = _.collectDeep(entry, \"definitionSenses.#.definitions.#.definition\");\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        definition = _ref1[_i];\n        if (0 <= definition.indexOf(searchVal)) {\n          return true;\n        }\n      }\n    };\n    if (!searchVal) {\n      console.log(\"MainView on app.search: No search val.  No predicate.\");\n      this.searchPredicate = null;\n      this.refreshMainListViews();\n      return;\n    }\n    matches = /^(\\w+:)?(.*)$/.exec(searchVal);\n    pendent = matches[1];\n    searchVal = (matches[2] || '').toLowerCase();\n    predicate = (function() {\n      switch (false) {\n        case !/^w:/.test(pendent):\n          return testWord;\n        case !/^g:/.test(pendent):\n          return testGlosses;\n        case !/^d:/.test(pendent):\n          return function(entry) {\n            return testGlosses(entry) || testDefinitions(entry);\n          };\n        default:\n          return function(entry) {\n            return testWord(entry) || testGlosses(entry) || testDefinitions(entry);\n          };\n      }\n    })();\n    console.log(\"MainView on app.search: predicate:\", predicate);\n    this.searchPredicate = predicate;\n    return this.refreshMainListViews();\n  };\n\n  /* Views*/\n\n\n  MainView.prototype.registerViews = function() {\n    this.initSorter();\n    this.registerSearchView();\n    this.registerStaticViews();\n    return this.registerMainListViews();\n  };\n\n  MainView.prototype.initSorter = function() {\n    return this.sorter = ArbitrarySorter(\"á a b d é e g í i k c l m n ó o p r s sh t ú u v f w y z '\");\n  };\n\n  MainView.prototype.registerSearchView = function() {\n    return this.searchView = new SearchView({\n      el: this.$(\"#global-search\")\n    });\n  };\n\n  MainView.prototype.registerStaticViews = function() {\n    return this.wordPageView = new WordPageView(this.$(\"#word_page\"));\n  };\n\n  MainView.prototype.registerMainListViews = function() {\n    this.wordsListView = new WordListView({\n      el: this.$(\"#layout-art-words\")\n    });\n    this.affixesListView = new WordListView({\n      el: this.$(\"#layout-art-affixes\")\n    });\n    this.conjsListView = new WordListView({\n      el: this.$(\"#layout-art-conjs\")\n    });\n    return this.mainListViews = [this.wordsListView, this.affixesListView, this.conjsListView];\n  };\n\n  MainView.prototype.refreshMainListViews = function() {\n    var getEntries, view, _i, _len, _ref1, _results,\n      _this = this;\n    if (this.model.dictionary.data == null) {\n      return;\n    }\n    getEntries = function(filterFn) {\n      return _this.sortEntries(_this.filterEntries(filterFn));\n    };\n    this.wordsListView.model = {\n      entries: getEntries(function(entry) {\n        return entry;\n      })\n    };\n    this.affixesListView.model = {\n      entries: getEntries(function(entry) {\n        var lc, _i, _len, _ref1;\n        _ref1 = entry.lexicalClass || [];\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n          lc = _ref1[_i];\n          switch (lc) {\n            case 'prefix':\n            case 'suffix':\n            case 'affix':\n            case 'infix':\n            case 'circumfix':\n              return true;\n          }\n        }\n        return false;\n      })\n    };\n    this.conjsListView.model = {\n      entries: getEntries(function(entry) {\n        var lc, _i, _len, _ref1;\n        _ref1 = entry.lexicalClass || [];\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n          lc = _ref1[_i];\n          switch (lc) {\n            case 'conjunction':\n              return true;\n          }\n        }\n        return false;\n      })\n    };\n    _ref1 = this.mainListViews;\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      view = _ref1[_i];\n      _results.push(view.render());\n    }\n    return _results;\n  };\n\n  /* Functions*/\n\n\n  MainView.prototype.filterEntries = function(filterFn) {\n    var combinedFilterFn,\n      _this = this;\n    combinedFilterFn = this.searchPredicate ? function(entry) {\n      return filterFn(entry) && _this.searchPredicate(entry);\n    } : filterFn;\n    return this.model.dictionary.findAllEntries(combinedFilterFn);\n  };\n\n  MainView.prototype.getActiveWordList = function() {\n    return this.mainSectionEl.children('article').filter(\".active\");\n  };\n\n  MainView.prototype.sortEntries = function(entries) {\n    var compareByWord,\n      _this = this;\n    compareByWord = function(a, b) {\n      return _this.sorter(a.word, b.word);\n    };\n    return (entries || []).concat().sort(compareByWord);\n  };\n\n  return MainView;\n\n})(BaseView);\n","var BaseView, SearchView, app, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\napp = require('application');\n\nBaseView = require('./BaseView');\n\nmodule.exports = SearchView = (function(_super) {\n  __extends(SearchView, _super);\n\n  function SearchView() {\n    _ref = SearchView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  SearchView.prototype.initialize = function(options) {\n    var _this = this;\n    this.searchFieldDom = this.$el.find(\"input[type=search]\");\n    app.vent.internal.on('app.search', function(val) {\n      return console.log(\"app.search:\", val);\n    });\n    return this.searchFieldDom.on('keyup', function() {\n      return app.vent.internal.trigger('app.search.keypress', _this.searchFieldDom.val());\n    });\n  };\n\n  SearchView.prototype.blur = function() {\n    return this.searchFieldDom[0].blur();\n  };\n\n  return SearchView;\n\n})(BaseView);\n","var ListItemView, WordListItemView, app, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\napp = require('../application');\n\nListItemView = require('./ListItemView');\n\nmodule.exports = WordListItemView = (function(_super) {\n  __extends(WordListItemView, _super);\n\n  function WordListItemView() {\n    _ref = WordListItemView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  WordListItemView.prototype.className = 'arrow';\n\n  WordListItemView.prototype.initialize = function(options) {\n    var _this = this;\n    WordListItemView.__super__.initialize.apply(this, arguments);\n    return this.$el.on('singleTap', function() {\n      _this.showWord.apply(_this, arguments);\n      return false;\n    });\n  };\n\n  WordListItemView.prototype.mapModel = function() {\n    var gloss, glosses, sense, senseGlosses, _i, _j, _len, _len1, _ref1, _ref2;\n    if (!this.model) {\n      return;\n    }\n    glosses = [];\n    _ref1 = this.model.definitionSenses;\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      sense = _ref1[_i];\n      senseGlosses = [];\n      glosses.push(senseGlosses);\n      if (sense.glosses) {\n        _ref2 = sense.glosses;\n        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n          gloss = _ref2[_j];\n          senseGlosses.push(gloss);\n        }\n      }\n    }\n    if (glosses.length < 1) {\n      glosses.push(this.model.definitionSenses[0].definitions[0].definition);\n    }\n    return {\n      word: this.model.word,\n      glosses: ((function() {\n        var _k, _len2, _results;\n        _results = [];\n        for (_k = 0, _len2 = glosses.length; _k < _len2; _k++) {\n          sense = glosses[_k];\n          _results.push(sense.join(\", \"));\n        }\n        return _results;\n      })()).join(\"; \")\n    };\n  };\n\n  WordListItemView.prototype.showWord = function(event) {\n    console.log(\"showWord: \" + this.model.word + \" from \" + (event != null ? event.type : void 0) + \" event\");\n    return app.mainview.wordPageView.showEntry(this.model);\n  };\n\n  return WordListItemView;\n\n})(ListItemView);\n","var ListView, WordListItemView, WordListView, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nListView = require('./ListView');\n\nWordListItemView = require('./WordListItemView');\n\n/*\nExpects a model in the form of:\n\tentries: [ (dictionary entries here)... ]\n*/\n\n\nmodule.exports = WordListView = (function(_super) {\n  __extends(WordListView, _super);\n\n  function WordListView() {\n    _ref = WordListView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  WordListView.prototype.itemViewClass = WordListItemView;\n\n  return WordListView;\n\n})(ListView);\n","/*\nCurrently this just uses Lungo's single section thing.\n\nThat won't work for going deeper, if we should even allow that.\n\nAlso, the mechanism to show it is also hax.\n*/\n\nvar ListItemView, ListView, WordPageListItemView, WordPageListView, WordPageView, app, _ref, _ref1,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\napp = require('application');\n\nListView = require('./ListView');\n\nListItemView = require('./ListItemView');\n\nmodule.exports = WordPageView = (function() {\n  function WordPageView(dom) {\n    this.setDom(dom);\n  }\n\n  WordPageView.prototype.setDom = function(dom) {\n    if (!dom) {\n      return;\n    }\n    this.dom = dom;\n    this.dom.addClass(\"list scroll\");\n    this.initListView();\n    return this.registerEvents();\n  };\n\n  WordPageView.prototype.$ = function(selector) {\n    return this.dom.find(selector);\n  };\n\n  WordPageView.prototype.initListView = function() {\n    return this.listView = new WordPageListView({\n      el: this.$(\"#layout-word-stuff\")\n    });\n  };\n\n  WordPageView.prototype.registerEvents = function() {\n    var _this = this;\n    return this.dom.on('load', function() {\n      return _this.refresh(_this.model);\n    });\n  };\n\n  WordPageView.prototype.refresh = function(model) {\n    this.dom.find(\"header h1\").text(model.word);\n    this.listView.model = model;\n    return this.listView.render();\n  };\n\n  WordPageView.prototype.showEntry = function(entry) {\n    this.model = entry;\n    return Lungo.Router.section(\"word_page\");\n  };\n\n  return WordPageView;\n\n})();\n\nWordPageListItemView = (function(_super) {\n  __extends(WordPageListItemView, _super);\n\n  function WordPageListItemView() {\n    _ref = WordPageListItemView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  WordPageListItemView.template(\"<h1>{{word}}<sub>{{senseIndex}}</sub></h1>\\n{{#each definitions}}\\n<p>\\n\t<em>{{#each parts}}{{this}}. {{/each}}</em>\\n\t{{definition}}\\n</p>\\n{{/each}}\");\n\n  WordPageListItemView.prototype.mapModel = function() {\n    return this.model;\n  };\n\n  return WordPageListItemView;\n\n})(ListItemView);\n\nWordPageListView = (function(_super) {\n  __extends(WordPageListView, _super);\n\n  function WordPageListView() {\n    _ref1 = WordPageListView.__super__.constructor.apply(this, arguments);\n    return _ref1;\n  }\n\n  WordPageListView.prototype.itemViewClass = WordPageListItemView;\n\n  WordPageListView.prototype.getModelsForListEls = function() {\n    var _ref2;\n    return (_ref2 = this.model) != null ? _ref2.definitionSenses : void 0;\n  };\n\n  return WordPageListView;\n\n})(ListView);\n"]}